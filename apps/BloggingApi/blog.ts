// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v4.25.2
// source: proto/blog.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "blog";

export interface RequestID {
  id: number;
}

export interface ResponseMSG {
  msg: string;
}

export interface Blog {
  id: number;
  authorId: number;
  title: string;
  summary: string;
  content: string;
}

export interface Blogs {
  Blog: Blog[];
}

export interface PostBlogDTO {
  title: string;
  summary: string;
  content: string;
  authorId: number;
}

export interface UpdateBlogDTO {
  id: number;
  title: string;
  summary: string;
  content: string;
}

export interface Author {
  id: number;
  name: string;
  email: string;
}

export interface Authors {
  Author: Author[];
}

export interface PostAuthorDTO {
  name: string;
  email: string;
}

export interface UpdateAuthorDTO {
  id: number;
  name: string;
  email: string;
}

export interface Empty {
}

export const BLOG_PACKAGE_NAME = "blog";

export interface BlogServiceClient {
  getBlogs(request: Empty): Observable<Blogs>;

  getBlog(request: RequestID): Observable<Blog>;

  postBlog(request: PostBlogDTO): Observable<Blog>;

  updateBlog(request: UpdateBlogDTO): Observable<ResponseMSG>;

  deleteBlog(request: RequestID): Observable<ResponseMSG>;
}

export interface BlogServiceController {
  getBlogs(request: Empty): Promise<Blogs> | Observable<Blogs> | Blogs;

  getBlog(request: RequestID): Promise<Blog> | Observable<Blog> | Blog;

  postBlog(request: PostBlogDTO): Promise<Blog> | Observable<Blog> | Blog;

  updateBlog(request: UpdateBlogDTO): Promise<ResponseMSG> | Observable<ResponseMSG> | ResponseMSG;

  deleteBlog(request: RequestID): Promise<ResponseMSG> | Observable<ResponseMSG> | ResponseMSG;
}

export function BlogServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getBlogs", "getBlog", "postBlog", "updateBlog", "deleteBlog"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BlogService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BlogService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BLOG_SERVICE_NAME = "BlogService";

export interface AuthorServiceClient {
  getAuthors(request: Empty): Observable<Authors>;

  getAuthor(request: RequestID): Observable<Author>;

  postAuthor(request: PostAuthorDTO): Observable<Author>;

  updateAuthor(request: UpdateAuthorDTO): Observable<ResponseMSG>;

  deleteAuthor(request: RequestID): Observable<ResponseMSG>;
}

export interface AuthorServiceController {
  getAuthors(request: Empty): Promise<Authors> | Observable<Authors> | Authors;

  getAuthor(request: RequestID): Promise<Author> | Observable<Author> | Author;

  postAuthor(request: PostAuthorDTO): Promise<Author> | Observable<Author> | Author;

  updateAuthor(request: UpdateAuthorDTO): Promise<ResponseMSG> | Observable<ResponseMSG> | ResponseMSG;

  deleteAuthor(request: RequestID): Promise<ResponseMSG> | Observable<ResponseMSG> | ResponseMSG;
}

export function AuthorServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAuthors", "getAuthor", "postAuthor", "updateAuthor", "deleteAuthor"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthorService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthorService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTHOR_SERVICE_NAME = "AuthorService";
